string 字符串（在底层以数组的形式保存）
number 数字
boolean 布尔值
null 空值
undefined 未赋值
object 对象

console.log(typeof a) 查询a的数据类型

a=a.tostring() 数字转字符串的强制类型转换
a=String(a) 数字转字符串的强制类型转换

a=Number(a) 字符串转数字的强制类型转换
parseInt(a) 将字符串a中的有效整数提取出来
parseInt(a,8) 指定数字类型为8进制
parseFloat(a) 将字符串a中的有效浮点数提取出来
a=Boolean(a) 字符串或数字转布尔值的强制类型转换（0，NaN，空字符串为false，null和undefined转换为false，其他为true）

a=0x10 实际为16,0x开头为16进制
a=010 实际为8,0开头为8进制
a=0b10 实际为2,0b开头为2进制（部分浏览器不支持）

typeof a 以字符串的形式返回a的值

a++ 先输出a再自增
++a 先自增再输出a的值

! 非 取反
&& 与 有true才为true，数字运算都为true会取后面数字为结果，有false则取靠前的false（返回原值）
|| 或 都为false才为false，数字运算，第一个值是true则返回第一个值，否则返回后面的值
数字会先变布尔值再运算，优先级!>&&>||

a=a+5等价于a+=5

== != 判断相对或不相等，会自动对数据进行类型转换
=== !== 判断相对或不相等，不会自动对数据进行类型转换

条件表达式?语句1:语句2 首先对条件表达式进行求值，true就返回语句1，false就返回语句2
true?alert("语句1"):alert("语句2") 弹出语句1
false?alert("语句1"):alert("语句2") 弹出语句2

if(条件表达式){
	alert("语句1");
}else if(条件表达式){
	alert("语句2");
}else{
	alert("语句3");
}
if（条件表达式）语句

prompt("请输出一个数字") 返回输入的数字

switch(num){
	case 1:
	alert("一");
	break;

	case 2:
	alert("二");
	break;

	default:
	alert("不是数字");
	break;
}

while(true){
	alert("1");
}
先判断后执行

do{
	alert("1");
}while(true)
先执行后判断

for(var i=0;i<10;i++){
	alert("i");
}

<br/> 换行
&nbsp 空格
break 跳出此循环
continue 跳过当次循环
Math sqrt(i) 对i开方
var obj=new Object 创建一个名为obj的对象
obj.name="01" 添加属性
obj["123"]=456 添加属性（特色属性名时）
delete obj.name 删除属性
"name" in obj 检查obj中是否有name这个属性，有就返回true，否则返回false
var obj={name:"1",age:10} 在创建对象时直接指定属性

var fun=function{
	alert("1");
}; 创建一个匿名函数，将其函数名蛇为fun

function fun(){
	alert("1");
}函数声明：声明一个叫fun的函数 （函数其实也是对象）

function sum(a,b){}相当于
function sum(){var a;var b;}

function sum(a,b){
	alert(a+b);
}sum(1,2);a，b是形参，1，2是实参

function sum(a,b){
	var c=a+b;
	return c;
}
var result=sun(1,2);
将c的结果返回出来，return后的语句都不会执行

(function(){语句})(); 立即执行函数
(function(a){alert(a)})(1) 自己调用自己

for(var n in obj){
	alert("属性名:"+n);
	alert("属性值:"+obj[n]);
}列出obj中的所有属性

变量的声明提前 var会优先运行
函数的声明提前 function会最优先运行

fun.this 以方法形式调用是调用方法的对象
window.this 以函数形式调用永远是调用window

function createPerson(i,j,k){
	var obj=new object();
	obj.name=i;
	obj.age=j;
	obj.gender=k;
	obj.sayname=funstion(){
		alert(this.name);
	};
var obj1=createPerson("1","2","3");
批量创建对象

function Person(i,j){
	this.name=i;
	this.age=j;
}
var per=new Person(i,j);
构建函数，会将新建的对象设置为函数中的this，会将代码运行一遍（首字母最好大写）
alert(per instanceof person) 判断per是否属于person这个的类的实例（类就是构造函数）

obj.__proto__ 每个构造函数都有一个原型对象prototype，他是隐藏的并在同类中可以公共使用,
当访问对象的一个属性或者方法时，会先在对象自身中寻找，如果有就会直接用，如果没有就会去原型对象中查找并使用
（用来避免污染全局作用域）
原型对象也有原型对象hasOwnProperty，他是Object的原型对象

alert("name" in mc) 检查mc中是否有name这个属性
alert(mc.hasOwnProperty("age"))' 检查mc中是否有name这个属性（但不检查原型对象）

Person.prototype.toString=function(){
	retuen "name="+this.name+",age="+this.age;
	}改变输出对象时的输出的内容

var obj=new Object();
obj=null;
当断开obj与堆内存中对应区域的链接，堆内存中对应的内容会自动删除

var arr=new Array();
arr[0]=1;
arr[1]=2;
alert(arr[1]);
数组

alert(arr.length) 检测arr的长度（如果索引只有0.1.2.11则会显示12）

var arr=[1,1,7,3,8]; 
var arr=new Array(1,1,7,3,8);
字面量创建数组
var arr=new Array(10); 创建一个长度为10的数组 
arr.push("3","2"); 往末尾添加新元素3,2并返回数组长度
arr.pop(); 删除末尾最后一个元素并返回删除的内容
arr.unshift("3"); 往前面添加新元素3并返回数组长度
arr.shift(); 删除第一个元素并返回删除的内容

arr.forEach(function(a){
	console.log("a="+a);
	});
回调函数，由我们创建但不由我们调用，数组中有几个元素就会执行几次，会将遍历到的元素以实参到的形式传递进来
会遍历三个元素，第一个是元素，第二个是索引，第三个是正在遍历的数组（ie8及以下的浏览器不支持）

arr.slice(1,4) 不会改变数组，而是将索引1-3（包前不包后）的元素封装到一个新数组中返回
arr.slice(2) 截取2以及以后的元素
arr.slice(1,-1) 除了0和最后一个都截取
arr.splice(3,3) 删除3,4,5元素(第一个是开始位置，第二个是删除数量)，并将删除的元素返回
arr.splice(3,3,"i","j") 第三个位置之后可以传递一些新的元素，这些元素将会自动插入到开始位置索引之前
arr1.concat(arr2,arr3,"i","j") 连接两个或以上的数组(还能添加新元素)，并将新的数组返回，不会对原数组产生影响
arr,join(); 将数组以字符串的形式返回，还可以指定一个字符串作为连接符，不会对原数组产生影响
arr.reverse(); 反转数组（前面去后面，后面去前面），会影响原数组
arr.sort() 对数组中的元素进行排序（默认按照Unicode排序，对数字不好用，因为只会比较第一位），会影响原数组
arr.sort(function(a,b){
	if(a>b){
		return 1;
	}
	else{
		return 0;
	}}); 可以用回调函数指定排序规则，当返回数小于等于0则a，b不换位置，当返回数大于0则交换位置

apply()与call() 在调用apply()与call()时可以将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的this，
call()可以在对象之后依次传递实参，apply则需要将实参封装到数组中统一传递

arguments.length 获取实参数量
arguments[0] 获取第一个实参
在调用函数时，我们的实参都会传递到arguments保存，他是一个伪数组，有一个属性arguments.callee指向函数的对象

var d=new Date("11/28/2021 16:27:28"); 创建时间，不填则为当前时间，填则按月日年 时分秒的规则填
d.getDate() 返回是几号
d.getDay() 返回是周几（0是周日）
d.getMonth() 返回是几月(0是一月)
d.getFullYear() 返回年份
d.getTime() 获取时间戳(格林威治标准时间的1970年1月1日 0时0分0秒到当前日期的毫秒数)

Math.ceil() 对数字向上取整
Math.floor() 对数字向下取整
Math.round() 四舍五入取整
Math.random() 随机生成0-1的随机数

str.charAt() 返回字符串指定位置的字符
str.charCodeAt() 返回字符串指定位置的字符编码（Unicode编码）
String.charCodeAt() 返回指定Unicode编码的字符
str.concat() 连接两个或以上的字符串
str.indexof("h",1) 检索字符串中是否含有指定内容，如果有就会返回第一次出现的索引（位置），可以指定开始查找的位置
str.slice(0,2) 从字符串中截取内容并返回，不会影响原数组
str.split(",") 将字符串拆分成一个数组并返回(根据","来拆分)
str.toUpperCase() 将字符串转换为大写
str.toLowerCase() 将字符串转换为小写

正则表达式
var reg=new RegExp("a","i");
alert(reg.test("abc"));
 第一个为正则表达式，第二个为匹配模式，
匹配模式有"i"(不区分大小写)，"g"（全局搜索模式）
用于搜索对象中是否含有目标
var reg=/a/i; /正则表达式/匹配模式
var reg=/a|b|c/; 使用|表示或，寻找是否有a或b或c
var reg=/[a-z]/; []也行，a到z任意字符
var reg=/a[abc]c/; 此处[]表示或，aac/abc/acc都可以
var reg=/[^a]/; 除了a都可以

var str="1a2b3c4d5e6f7A8B9C";
result=str.match(/[a-z]/gi);
alert(result);
会将符合条件的内容提取出来并以数组的形式返回
str.replace("a","b") 替换内容并返回，可以用来删对应内容
aaaaa=a{5}
ababab=(ab){3}

var reg=/a{1,3}/
alert(reg.test("aa"));
如果1到3个a就返回true
a+ 大于等于一个({1,})
a* 大于等于0({0,})
a? 0或1个({0,1})
^a 以a开头
a# 以a结尾
. 表示任意字符
\. 表示.（用了转义字符）
\\ 表示\(两个才表示一个)  构造函数里面的\\.等于字面量里的\.
\w 任意数字字母_([A-z0-9_])
\W 除了数字字母_([^A-z0-9_])
\d 任意数字([0-9])
\D 除了数字([^0-9])
\s 空格 
\S 除了空格
\b 单词边界
\B 除了单词边界
var reg=/child/;
alert("hello child and");
var reg=/\bchild\b/;
alert("hellochildand");
单词边界:单词两边有空格
^[0-2]$正整数

DOM
var btn=document.getElementById("btn") 获取对象，""填对象id
btn.onclick=function(){} 单击相应函数
btn.ondblclick=function(){} 双击相应函数
btn.onmousemove=function(){} 鼠标移动相应函数
window.onload=function(){} 页面加载完成后相应函数
alert(bj.innerHTML) 获取id为bj的元素内部的html代码
var lis=document.getElementsByTagName("li") 根据标签名来获取一组元素节点对象（查询到的对象会封装到一个类数组对象中）
var lis=document.getElementsByTagName("li")[0].innerHTML 第一个元素的内容
var inputs=document.getElementsByName ("gender") 查找name为gender的所有节点
inputs.value 元素.属性名 读取元素节点属性（class属性不能用这种方式，用.className）
document.onkeydown=function(){} 键盘按下事件
document.onkeyup=function(){} 键盘松开事件
document.onkeydown=function(event){
event=event||window.event;
console.log(String.fromCharCode(event.keyCode));
}获取键盘输入的值

var nr="";
document.onkeyup=function(event){
                        event=event||window.event;
                        if(event.keyCode){
                            nr=nr.concat(String.fromCharCode(event.keyCode));
                            console.clear();
                            console.log(nr);
                        }
                    }获取输入的值并串起来

pn.innerText 返回pn的元素内容
fc.nodeValue 返回pn的元素内容，每个元素节点都有的元素
and.previousSibling; 获取前一个兄弟节点
and.previousElementSibling; 获取前一个兄弟元素
um.value 读取文本框中的填写的内容
document.body 获取所有body元素
document.documentElement 获取所有html标签
document.all a获取页面所有元素
querySelector(".box1 div") 根据css选择器来查询一个元素节点对象
querySelectorAll 与上面类似，不同的是这会封装到数组中

var li=document.createElement("li");
var gzText=documentcreateTextNode("广州");
li.appendChlid(gzText);
var city=document.getElementById("city");
city.appendChlid(li);
创建新节点li，新节点内容为广州，向父节点li中添加子节点gzText,获取city节点，将li添加到city下。

简便方法1
var city=document.getElementById("city");
city.innerHTML+="<li>广州</li>";

简便方法2
var city=document.getElementById("city");
var li=document.createElement("li");
li.innerHTML="广州";
city.appendChild(li);

city.insertBefore(li,bj); 在父节点city中，将li插入到bj前
city.replaceChild(li,bj); 在父节点city中，将gz替换bj
city.removeChild(bj); 在父节点city中，删除bj
bj.parentNode 能直接得到bj的父节点，而且不用获取父节点

confirm("1"); 带确认取消的提示框，返回true和false

box1.style.width="300px"; 修改box1样式宽度为300像素
background-color要写成backgroundColor
js修改内联样式优先级比css高，除非css加!important
box1.currentStyle.width 返回当前box1显示width的样式
getComputedStyle(box1.null) 返回一个对象，封装了box1对应的样式
用window.getComputedStyle判断是否是ie8以下的版本

event.clientX 鼠标x绝对坐标
event.clientY 鼠标y绝对坐标
event.pagetX 鼠标x相对坐标
event.pageX 鼠标x相对坐标

在css中写position:absolute开启绝对定位
document.body.scrollTop 返回页面滚动条位置
event.cancelBubble=true 取消冒泡
event.target 触发时间的对象

btn01.addEventListener("click",function(){},false); 
事件的字符串去掉on，当事件触发时调用的函数，是否在捕获阶段触发事件（需要一个布尔值，一般为false）
对于一个按钮，可重复触发的函数

onmousedown 鼠标按下时绑定的事件
onmousemove 鼠标移动时绑定的事件
onmousedownup 鼠标松开时绑定的事件
onmousewheel 鼠标滚轮滚动事件

BOM
/firefox/i.text(navigator.userAgent) 判断是否是火狐浏览器
"ActiveXObject" in window 判断是否是ie
history.length 历史页面的数量
history.back() 返回原来的页面
history.forward() 下一个页面
history.go() 里面的参数得是整数，正数向前跳，负数向后跳
location 当前地址
location="http://www.baidu.com" 跳转页面
location.reload(true); 强制清空缓存并刷新，没有true就是普通刷新

var num=1;
var timer=setInterval(function(){count.innerHTML=num++},1000);
每1秒加1的定时器
clearInterval(timer);关闭定时器
setTimeout(function(){count.innerHTML=num++},1000);
延时调用定时器，只会调用一次

style.left
与下面作用相同，可以写变量
attr=left
style[attr]

box.className="b2"; 修改样式
box.className+=" b2"; 添加样式

var json='{"name":"人","age":18,"gender":"男"}';
var o=JSON.parse(json);
将JSON字符串作为参数，将该字符串转换为对象，必须用双引号
var str=JSON.stringify(obj); 将对象转化为JSON字符串

A instanceof B 判断 B是不是A的实例

left: 50%;transform: translateX(-50%);/*居中*/

本地储存localStorage
新增
localStorage.setItem('token', r.data.token)
删除
localStorage.removeItem('token')
查询
localStorage.getItem('token')

判断某个对象是否有那个属性
Object.hasOwnProperty.call(对象, '属性')












